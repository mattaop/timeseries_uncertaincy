import numpy as np
import matplotlib.pyplot as plt


def plot_forecast(mean, uncertainty, holdout_y, last_day, exp_smooth):
    x = np.linspace(1, len(holdout_y), len(holdout_y))
    plt.plot(x, holdout_y, color='green', label='True')
    # plt.plot(x, last_day, color='blue', label='Last_day')
    plt.plot(x, exp_smooth, color='red', label='Exponential_smoothing')
    plt.plot(x, mean, color='orange', label='LSTM')

    plt.title('AveragePrice ORGANIC Albany')
    plt.fill_between(x,
                     mean - 1.28 * uncertainty,
                     mean + 1.28 * uncertainty,
                     alpha=0.5, edgecolor='#CC4F1B', facecolor='#FF9848', label='80%-PI')
    plt.fill_between(x,
                     mean - 1.96 * uncertainty,
                     mean + 1.96 * uncertainty,
                     alpha=0.2, edgecolor='#CC4F1B', facecolor='#FF9848', label='95%-PI')
    plt.xlabel('Weeks')
    plt.ylabel('')
    plt.legend()
    plt.show()


def plot_95_coverage(data):
    # Airpassengers
    if data == 'airpassengers':
        rnn_95_pi = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        lstm_95_pi = [1, 0.9875, 0.975, 0.975, 0.9875, 0.9875, 0.9875, 0.9875, 0.9875, 1, 0.975, 0.9625]
        cnn_95_pi = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        arima_95_pi = [0.9375, 1.0, 0.9375, 0.9375, 0.9375, 0.9375, 0.9375, 1.0, 1.0, 1.0, 1.0, 1.0]

    elif data == 'avocado':
        rnn_95_pi = [0.91710758, 0.82275132, 0.76895944, 0.72398589, 0.74426808, 0.73368607, 0.71957672, 0.74426808,
                     0.75485009, 0.77160494, 0.78924162, 0.79982363]
        lstm_95_pi = [0.88977072, 0.84215168, 0.83862434, 0.77425044, 0.75396825, 0.74162257, 0.71957672, 0.70546737,
                      0.70458554, 0.70899471, 0.71252205, 0.6957672]
        cnn_95_pi = [0.89065256, 0.89065256, 0.83686067, 0.82363316, 0.81922399, 0.8042328, 0.81128748, 0.829806,
                     0.84391534, 0.86684303, 0.88007055, 0.88359788]
        arima_95_pi = []

    # Oslo temperature
    else:
        rnn_95_pi = [0.9731182795698925, 0.9623655913978495, 0.9516129032258065, 0.9516129032258065, 0.946236559139785, 0.946236559139785, 0.9623655913978495, 0.967741935483871, 0.967741935483871, 0.967741935483871, 0.956989247311828, 0.956989247311828]

        lstm_95_pi = [0.9731182795698925, 0.9731182795698925, 0.967741935483871, 0.956989247311828, 0.9623655913978495, 0.9731182795698925, 0.9731182795698925, 0.9731182795698925, 0.9731182795698925, 0.9731182795698925, 0.9731182795698925, 0.967741935483871]

        cnn_95_pi = [0.967741935483871, 0.9731182795698925, 0.9623655913978495, 0.9731182795698925, 0.9623655913978495, 0.967741935483871, 0.978494623655914, 0.978494623655914, 0.978494623655914, 0.9731182795698925, 0.9731182795698925, 0.9731182795698925]

        arima_95_pi = [0.9354838709677419, 0.946236559139785, 0.9408602150537635, 0.9354838709677419,
                       0.9408602150537635, 0.946236559139785, 0.946236559139785, 0.9354838709677419, 0.9354838709677419,
                       0.946236559139785, 0.9354838709677419, 0.9408602150537635]


    print('mean rnn coverage', np.mean(rnn_95_pi))
    print('mean lstm coverage', np.mean(lstm_95_pi))
    print('mean cnn coverage', np.mean(cnn_95_pi))
    print('mean arima coverage', np.mean(arima_95_pi))

    t = np.linspace(1, len(rnn_95_pi), len(rnn_95_pi))
    plt.figure()
    plt.plot(t, rnn_95_pi, label='RNN')
    plt.plot(t, lstm_95_pi, label='LSTM')
    plt.plot(t, cnn_95_pi, label='CNN')
    plt.plot(t, arima_95_pi, label='SARIMA')
    plt.plot(t, [0.95 for _ in range(len(t))], label='95%-level')
    plt.title('95% Prediction Interval Coverage')
    plt.xlabel('Forecast horizon (months)')
    plt.ylabel('Average coverage')
    plt.legend(loc=4)
    plt.show()


def plot_width(data):
    if data == 'airpassengers':
        # Airpassengers
        rnn_95_pi = [0.30711363, 0.33316567, 0.34430491, 0.35785083, 0.37080847, 0.38648864, 0.40495871, 0.42958327,
                     0.45393308, 0.46604897, 0.47037467, 0.46751297]
        lstm_95_pi = [0.41143793, 0.42831377, 0.43537778, 0.43930544, 0.44779343, 0.46377125, 0.48474476, 0.5042117,
                      0.52005158, 0.53142377, 0.54476272, 0.56232999]
        cnn_95_pi = [0.31155152, 0.31034624, 0.31322132, 0.31689192, 0.3210871,  0.32613294, 0.33437698, 0.34815752,
                     0.36437349, 0.36765292, 0.36804841, 0.36259646]
        arima_95_pi = [0.0800473366404168, 0.11320401182537584, 0.1386460303496012, 0.1600946418553467, 0.1789912497416728,
                       0.19607508869916412, 0.21178530020773267, 0.22640800859384996, 0.24014195687080087,
                       0.25313184777309633, 0.2654869213253792, 0.27729204723504053]
    elif data == 'avocado':
        rnn_95_pi = [0.50450135, 0.51635519, 0.52027112, 0.52005433, 0.51866132, 0.5159397, 0.51462092, 0.51660997,
                     0.521459, 0.52900376, 0.5384556, 0.54816813]
        lstm_95_pi = [0.44711746, 0.46941015, 0.48215103, 0.49173281, 0.49847107, 0.5034234, 0.50732129, 0.51030679,
                      0.51182853, 0.51314904, 0.51445819, 0.51598283]
        cnn_95_pi = [0.83914631, 0.84044645, 0.84050612, 0.84457584, 0.84801225, 0.85029103, 0.84835902, 0.84939582,
                     0.85059838, 0.85342485, 0.85532384, 0.85900394]
        arima_95_pi = []
    # Oslo temperature
    else:
        rnn_95_pi = [0.25525872259702376, 0.26085111770826297, 0.26204565072506797, 0.26161606343579186, 0.2615857692467842, 0.26171757572737464, 0.26355282388617246, 0.26306589964945726, 0.2634748562387314, 0.26315819676217095, 0.2641732672362025, 0.2645957274933037]

        lstm_95_pi = [0.2529345949347112, 0.25550233429251706, 0.2563676507497771, 0.25678636461369303, 0.25707578951600035, 0.25733795773309914, 0.25718618530368986, 0.2571852611860494, 0.2576987341030339, 0.25844005244019025, 0.2586107744882461, 0.2591653726517342]

        cnn_95_pi = [0.3088054591035973, 0.3087275741041772, 0.3097973115200098, 0.30979089720801206, 0.31035714662078917, 0.311382213733544, 0.3124071657301722, 0.31241229092078604, 0.31298207017623775, 0.31347446395558914, 0.31421538421325973, 0.3146379250344686]

        arima_95_pi = [0.21446076370870895, 0.23014861708949952, 0.23291180254200644, 0.23363395375149623,
                       0.23394184799159418, 0.2341419407885195, 0.2343084244897173, 0.23446337464083067,
                       0.2346141741690294, 0.23476342272507328, 0.2349120969414214, 0.23506048402958016]



    t = np.linspace(1, len(rnn_95_pi), len(rnn_95_pi))
    plt.figure()
    plt.plot(t, rnn_95_pi, label='RNN')
    plt.plot(t, lstm_95_pi, label='LSTM')
    plt.plot(t, cnn_95_pi, label='CNN')
    plt.plot(t, arima_95_pi, label='SARIMA')

    plt.title('95% Prediction Interval Width')
    plt.xlabel('Forecast horizon (months)')
    plt.ylabel('Width of prediction interval')
    plt.legend()
    plt.show()


def plot_mse(data):
    # Airpassengers
    if data == 'airpassengers':
        rnn_mse = [0.0009288, 0.00090854, 0.00114464, 0.0014596, 0.0014004, 0.00158207, 0.00154756, 0.00168787, 0.00176523,
                   0.00198432, 0.00196122, 0.00202797]
        lstm_mse = [0.00271384, 0.00282496, 0.00312325, 0.00327856, 0.00424447, 0.00522951, 0.0064066,  0.00750565,
                    0.00770948, 0.00771128, 0.00803582, 0.00798427]
        cnn_mse = [0.00182653, 0.00184537, 0.00205294, 0.00225202, 0.00269683, 0.00279613, 0.00278023, 0.00282437,
                   0.0026767, 0.00258564, 0.00295815, 0.00359091]
        arima_mse = [0.0008744091258934194, 0.0008900153641430354, 0.0014245834815417354, 0.0021564412077785377,
                     0.002431295652316265, 0.003106784888922365, 0.003115869369322841, 0.0034955404039697198,
                     0.003067653329765412, 0.0038130204998127015, 0.003601289603180532, 0.0039183037858420405]
    elif data == 'avocado':
        rnn_mse = [0.02012552, 0.03204412, 0.04005621, 0.0476241,  0.05130954, 0.05711495, 0.05862226, 0.05694694,
                   0.05465177, 0.05026365, 0.04640226, 0.04527528]
        lstm_mse = [0.01741679, 0.02575461, 0.02968801, 0.03620965, 0.03991856, 0.04918773, 0.05312019, 0.05360958,
                    0.05381827, 0.05291148, 0.05274671, 0.05578752]
        cnn_mse = [0.04224967, 0.04178111, 0.05185497, 0.05694068, 0.0637321,  0.07171312, 0.06843708, 0.06522433,
                   0.06036615, 0.0543142, 0.04931051, 0.04931281]
        arima_mse = []
    else:
        # Oslo temperature

        rnn_mse = [0.0034195527963621184, 0.003884212528442182, 0.0039864187839221315, 0.004035886941171429, 0.004105193305174903, 0.004156274028395333, 0.003927535603878886, 0.003843361450430135, 0.0037770810209147992, 0.0037379913504780237, 0.003837308083322726, 0.0040349572676178416]
        lstm_mse = [0.0032338018792812395, 0.003779694080646258, 0.003908229622243048, 0.00397085340024478, 0.004014741292719145, 0.0038118657019056814, 0.003743722699695137, 0.0036464772339025154, 0.0035993427276156255, 0.003650820064676065, 0.0037676320823795298, 0.003974961912431658]
        cnn_mse = [0.0048296829745003746, 0.0048877755562323376, 0.005165825702829183, 0.00509523783468755, 0.005114495619077106, 0.004950476059761877, 0.004375378741683666, 0.00436219255021047, 0.004234670199690738, 0.004300792546306268, 0.004447821220691193, 0.004756612124991509]

        arima_mse = [0.0029328331799057224, 0.003161679099667472, 0.0031939981124412212, 0.003282031317568554,
                     0.0033182459903927522, 0.003325771671285998, 0.0033238318249008665, 0.003322616440287602,
                     0.0033030022146132475, 0.003313686071858614, 0.0033232204637617902, 0.0033585308414513905]


    print('mean rnn mse', np.mean(rnn_mse))
    print('mean lstm mse', np.mean(lstm_mse))
    print('mean cnn mse', np.mean(cnn_mse))
    print('mean arima mse', np.mean(arima_mse))

    t = np.linspace(1, len(rnn_mse), len(rnn_mse))
    plt.figure()
    plt.plot(t, rnn_mse, label='RNN')
    plt.plot(t, lstm_mse, label='LSTM')
    plt.plot(t, cnn_mse, label='CNN')
    plt.plot(t, arima_mse, label='SARIMA')

    plt.title('MSE for sliding window prediction')
    plt.xlabel('Forecast horizon (months)')
    plt.ylabel('Mean MSE at given forecast horizon')
    plt.legend()
    plt.show()


def plot_dropout_rate():
    rnn_coverage_00 = [0.9301075268817204, 0.9032258064516129, 0.9086021505376344, 0.9032258064516129, 0.9032258064516129, 0.9032258064516129, 0.9032258064516129, 0.9086021505376344, 0.9086021505376344, 0.9139784946236559, 0.9086021505376344, 0.8924731182795699]
    rnn_coverage_01 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.956989247311828, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.9623655913978495]
    rnn_coverage_02 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.9516129032258065, 0.956989247311828]
    rnn_coverage_03 = [0.9623655913978495, 0.956989247311828, 0.9516129032258065, 0.9516129032258065, 0.956989247311828, 0.956989247311828, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.9516129032258065, 0.9623655913978495]
    rnn_coverage_04 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.956989247311828]
    rnn_coverage_05 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.956989247311828, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.9516129032258065, 0.9623655913978495]
    rnn_coverage_06 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.956989247311828]
    rnn_coverage_07 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.956989247311828, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.9516129032258065, 0.9623655913978495]
    print('Mean coverage at rate 0.0', np.mean(rnn_coverage_00))
    print('Mean coverage at rate 0.1', np.mean(rnn_coverage_01))
    print('Mean coverage at rate 0.2', np.mean(rnn_coverage_02))
    print('Mean coverage at rate 0.3', np.mean(rnn_coverage_03))
    print('Mean coverage at rate 0.4', np.mean(rnn_coverage_04))
    print('Mean coverage at rate 0.5', np.mean(rnn_coverage_05))
    print('Mean coverage at rate 0.6', np.mean(rnn_coverage_06))
    print('Mean coverage at rate 0.7', np.mean(rnn_coverage_07))


def plot_80_coverage(data):
    # Airpassengers
    if data == 'airpassengers':
        rnn_pi = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        lstm_pi = [0.8875, 0.875,  0.8375, 0.8625, 0.8125, 0.775,  0.7375, 0.7, 0.725, 0.7125, 0.7, 0.6875]
        cnn_pi = [0.9375, 0.9375, 0.9125, 0.925, 0.9, 0.9, 0.925, 0.9125, 0.9375, 0.925, 0.9125, 0.8875]
        arima_pi = [0.625, 0.6875, 0.75, 0.6875, 0.6875, 0.625, 0.75, 0.6875, 0.8125, 0.6875, 0.75, 0.8125]
    elif data == 'avocado':
        rnn_pi = [0.73015873, 0.62169312, 0.57054674, 0.55643739, 0.57407407, 0.59082892, 0.57848325, 0.57054674,
                  0.58024691, 0.58641975, 0.60670194, 0.59964727]
        lstm_pi = [0.74162257, 0.64550265, 0.60846561, 0.53439153, 0.53791887, 0.54144621, 0.52910053, 0.52028219,
                   0.51499118, 0.52645503, 0.50881834, 0.48941799]
        cnn_pi = [0.72310406, 0.7319224,  0.70899471, 0.70194004, 0.72222222, 0.70194004, 0.70634921, 0.71693122,
                  0.71869489, 0.72663139, 0.73809524, 0.74074074]
    else:
        # Oslo temperature

        rnn_pi = [0.8225806451612904, 0.8172043010752689, 0.8064516129032258, 0.7903225806451613, 0.7903225806451613, 0.7849462365591398, 0.8118279569892473, 0.8172043010752689, 0.8172043010752689, 0.8172043010752689, 0.8118279569892473, 0.8118279569892473]

        lstm_pi = [0.8602150537634409, 0.8118279569892473, 0.8064516129032258, 0.8064516129032258, 0.8010752688172043, 0.8172043010752689, 0.8172043010752689, 0.8172043010752689, 0.8172043010752689, 0.8225806451612904, 0.8225806451612904, 0.8064516129032258]
        cnn_pi = [0.8333333333333334, 0.8387096774193549, 0.8333333333333334, 0.8225806451612904, 0.8387096774193549, 0.8548387096774194, 0.8817204301075269, 0.8924731182795699, 0.8924731182795699, 0.8870967741935484, 0.8709677419354839, 0.8602150537634409]

        arima_pi = [0.7956989247311828, 0.8279569892473119, 0.8387096774193549, 0.8333333333333334, 0.8279569892473119,
                    0.8279569892473119, 0.8387096774193549, 0.8333333333333334, 0.8333333333333334, 0.8387096774193549,
                    0.8279569892473119, 0.8225806451612904]


    print('mean rnn coverage', np.mean(rnn_pi))
    print('mean lstm coverage', np.mean(lstm_pi))
    print('mean cnn coverage', np.mean(cnn_pi))
    print('mean arima coverage', np.mean(arima_pi))

    t = np.linspace(1, len(rnn_pi), len(rnn_pi))
    SMALL_SIZE = 8
    MEDIUM_SIZE = 10
    BIGGER_SIZE = 22

    plt.figure()
    plt.plot(t, rnn_pi, label='RNN')
    plt.plot(t, lstm_pi, label='LSTM')
    plt.plot(t, cnn_pi, label='CNN')
    plt.plot(t, arima_pi, label='SARIMA')
    plt.plot(t, [0.80 for _ in range(len(t))], label='80%-level')
    plt.title('80% Prediction Interval Coverage')
    plt.xlabel('Forecast horizon (months)')
    plt.ylabel('Average coverage')
    plt.legend(loc=4)
    plt.show()


def plot_80_width(data):
    if data == 'airpassengers':
        # Airpassengers
        rnn_width = [0.20032431, 0.21756781, 0.22510021, 0.23390443, 0.24244329, 0.25261368, 0.2647893, 0.28078248,
                     0.2967349, 0.30485533, 0.30757106, 0.30569471]
        lstm_width = [0.17264148, 0.17338259, 0.17512061, 0.17810107, 0.18088639, 0.18514931, 0.19045812, 0.19847541,
                      0.20966614, 0.2179322,  0.21766339, 0.21403374]
        cnn_width = [0.20166595, 0.20089016, 0.20287764, 0.20577507, 0.20833969, 0.21212501, 0.21765567, 0.22722107,
                     0.23826388, 0.24065379, 0.24059653, 0.23744872]
        arima_width = [0.052340140124194925, 0.07402012471917188, 0.09065576645928643, 0.10468025970036836,
                       0.11703608746619676, 0.12820660934016004, 0.13847896450211855, 0.14804023959316492,
                       0.1570203856847603, 0.16551401880934902, 0.17359256717974797, 0.18131152411483056]

    # Oslo temperature
    elif data == 'avocado':
        rnn_width = [0.32947027, 0.33721156, 0.33976889, 0.33962732, 0.3387176,  0.33694021, 0.33607897, 0.33737794,
                     0.34054465, 0.34547184, 0.35164447, 0.35798735]
        lstm_width = [0.29199507, 0.30655356, 0.31487414, 0.32113163, 0.32553212, 0.3287663, 0.33131186, 0.33326158,
                      0.33425537, 0.33511774, 0.3359727, 0.33696838]
        cnn_width = [0.54801392, 0.54886299, 0.54890195, 0.55155973, 0.55380392, 0.5552921, 0.55403038, 0.55470747,
                     0.55549282, 0.55733868, 0.55857883, 0.56098216]
    else:
        rnn_width = [0.16669957394091348, 0.17035175034009012, 0.17113185353473828, 0.17085130673357835, 0.1708315227734101, 0.17091760047502016, 0.1721161298848473, 0.17179813854658435, 0.1720652122375389, 0.17185841421203002, 0.17252131737874452, 0.17279720979154525]
        lstm_width = [0.16518177628389302, 0.16685866729307236, 0.16742377191822175, 0.16769721770690157, 0.16788622988800023, 0.16805744178488108, 0.16795832509628728, 0.1679577215908894, 0.16829305084279766, 0.16877717710379775, 0.1688886690535485, 0.1692508556092958]

        cnn_width = [0.20166887125132885, 0.2016180075782382, 0.20231661160490436, 0.20231242266645688, 0.2026822182013317, 0.2033516497851716, 0.2040210061911329, 0.2040243532543909, 0.20439645399264506, 0.20471801727711947, 0.2052018835678431, 0.20547782859393868]

        arima_width = [0.1402283560548609, 0.15048609202285335, 0.15229284187666825, 0.1527650311721766,
                       0.15296635239467457, 0.15309718604221942, 0.153206043883277, 0.153307360341287,
                       0.15340596285284885, 0.1535035512382284, 0.1536007640830664, 0.15369778918487254]

    t = np.linspace(1, len(rnn_width), len(rnn_width))
    plt.figure()
    plt.plot(t, rnn_width, label='RNN')
    plt.plot(t, lstm_width, label='LSTM')
    plt.plot(t, cnn_width, label='CNN')
    plt.plot(t, arima_width, label='SARIMA')

    plt.title('80% Prediction Interval Width')
    plt.xlabel('Forecast horizon (months)')
    plt.ylabel('Width of prediction interval')
    plt.legend()
    plt.show()


if __name__ == '__main__':
    data_set = 'oslo'
    plot_95_coverage(data_set)
    plot_width(data_set)
    plot_mse(data_set)
    plot_dropout_rate()
    plot_80_coverage(data_set)
    plot_80_width(data_set)
