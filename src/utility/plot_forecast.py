import numpy as np
import matplotlib.pyplot as plt


def plot_forecast(mean, uncertainty, holdout_y, last_day, exp_smooth):
    x = np.linspace(1, len(holdout_y), len(holdout_y))
    plt.plot(x, holdout_y, color='green', label='True')
    # plt.plot(x, last_day, color='blue', label='Last_day')
    plt.plot(x, exp_smooth, color='red', label='Exponential_smoothing')
    plt.plot(x, mean, color='orange', label='LSTM')

    plt.title('AveragePrice ORGANIC Albany')
    plt.fill_between(x,
                     mean - 1.28 * uncertainty,
                     mean + 1.28 * uncertainty,
                     alpha=0.5, edgecolor='#CC4F1B', facecolor='#FF9848', label='80%-PI')
    plt.fill_between(x,
                     mean - 1.96 * uncertainty,
                     mean + 1.96 * uncertainty,
                     alpha=0.2, edgecolor='#CC4F1B', facecolor='#FF9848', label='95%-PI')
    plt.xlabel('Weeks')
    plt.ylabel('')
    plt.legend()
    plt.show()


def plot_coverage():
    # Airpassengers
    rnn_95_pi = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    lstm_95_pi = [1, 0.9875, 0.975, 0.975, 0.9875, 0.9875, 0.9875, 0.9875, 0.9875, 1, 0.975, 0.9625]
    cnn_95_pi = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    arima_95_pi = [0.9375, 1.0, 0.9375, 0.9375, 0.9375, 0.9375, 0.9375, 1.0, 1.0, 1.0, 1.0, 1.0]

    # Oslo temperature
    """
    rnn_95_pi = [0.967741935483871, 0.956989247311828, 0.956989247311828, 0.9516129032258065, 0.956989247311828, 0.956989247311828, 0.9623655913978495, 0.9516129032258065, 0.956989247311828, 0.956989247311828, 0.9516129032258065, 0.9623655913978495]

    lstm_95_pi = [0.9623655913978495, 0.9408602150537635, 0.9408602150537635, 0.9354838709677419, 0.9354838709677419,
                  0.9408602150537635, 0.9354838709677419, 0.946236559139785, 0.946236559139785, 0.946236559139785,
                  0.9301075268817204, 0.9193548387096774]
    cnn_95_pi = [0.9838709677419355, 0.9838709677419355, 0.978494623655914, 0.9731182795698925, 0.9731182795698925,
                 0.967741935483871, 0.989247311827957, 0.9838709677419355, 0.989247311827957, 0.9838709677419355,
                 0.9838709677419355, 0.989247311827957]
    arima_95_pi = [0.9516129032258065, 0.946236559139785, 0.9408602150537635, 0.946236559139785, 0.9408602150537635,
                   0.946236559139785, 0.946236559139785, 0.946236559139785, 0.946236559139785, 0.9516129032258065,
                   0.956989247311828, 0.9516129032258065]
    """
    print('mean rnn coverage', np.mean(rnn_95_pi))
    print('mean lstm coverage', np.mean(lstm_95_pi))
    print('mean cnn coverage', np.mean(cnn_95_pi))
    print('mean arima coverage', np.mean(arima_95_pi))

    t = np.linspace(1, len(rnn_95_pi), len(rnn_95_pi))
    plt.figure()
    plt.plot(t, rnn_95_pi, label='RNN')
    plt.plot(t, lstm_95_pi, label='LSTM')
    plt.plot(t, cnn_95_pi, label='CNN')
    plt.plot(t, arima_95_pi, label='SARIMA')
    plt.plot(t, [0.95 for _ in range(len(t))], label='95%-level')
    plt.title('95% Prediction Interval Coverage')
    plt.xlabel('Forecast horizon (months)')
    plt.ylabel('Average coverage')
    plt.legend(loc=4)
    plt.show()


def plot_width():
    # Airpassengers
    rnn_95_pi = [0.30711363, 0.33316567, 0.34430491, 0.35785083, 0.37080847, 0.38648864, 0.40495871, 0.42958327,
                 0.45393308, 0.46604897, 0.47037467, 0.46751297]
    lstm_95_pi = [0.41143793, 0.42831377, 0.43537778, 0.43930544, 0.44779343, 0.46377125, 0.48474476, 0.5042117,
                  0.52005158, 0.53142377, 0.54476272, 0.56232999]
    cnn_95_pi = [0.31155152, 0.31034624, 0.31322132, 0.31689192, 0.3210871,  0.32613294, 0.33437698, 0.34815752,
                 0.36437349, 0.36765292, 0.36804841, 0.36259646]
    arima_95_pi = [0.0800473366404168, 0.11320401182537584, 0.1386460303496012, 0.1600946418553467, 0.1789912497416728,
                   0.19607508869916412, 0.21178530020773267, 0.22640800859384996, 0.24014195687080087,
                   0.25313184777309633, 0.2654869213253792, 0.27729204723504053]

    # Oslo temperature
    """
    rnn_95_pi = [0.26328817384077174, 0.26962033468149704, 0.269895397260394, 0.2695594113941714, 0.26889175381006303, 0.26831846686345234, 0.27038210932371803, 0.27145892976647856, 0.2721023222762875, 0.27202101443873894, 0.27374974651290035, 0.27491863128158467]

    lstm_95_pi = [0.25537735642898973, 0.25804991031605196, 0.25914162938330887, 0.2601161906225513,
                  0.26063841790487957, 0.26027249923920165, 0.2603553139400568, 0.26104178851984383,
                  0.26131648178793726, 0.2620002718856935, 0.2634234326532865, 0.2634223428474266]
    cnn_95_pi = [0.3026888380360767, 0.30223570603310107, 0.3042690935111819, 0.3048083197420292, 0.3063362659435997,
                 0.3077906720620716, 0.30983816432791883, 0.3098281486342798, 0.30996128657697203, 0.31046411787606987,
                 0.31073803166179526, 0.3118273091415065]
    arima_95_pi = [0.2117154812248553, 0.22757092443833365, 0.23137632354325469, 0.23309514962064626,
                   0.2343129053254777, 0.23538395394884676, 0.23640658550753538, 0.2374109170661496,
                   0.23840654595774577, 0.23939659186793016, 0.240382099430837, 0.24136343223344614]
    """

    t = np.linspace(1, len(rnn_95_pi), len(rnn_95_pi))
    plt.figure()
    plt.plot(t, rnn_95_pi, label='RNN')
    plt.plot(t, lstm_95_pi, label='LSTM')
    plt.plot(t, cnn_95_pi, label='CNN')
    plt.plot(t, arima_95_pi, label='SARIMA')

    plt.title('95% Prediction Interval Width')
    plt.xlabel('Forecast horizon (months)')
    plt.ylabel('Width of prediction interval')
    plt.legend()
    plt.show()


def plot_mse():
    # Airpassengers
    rnn_mse = [0.0009288, 0.00090854, 0.00114464, 0.0014596, 0.0014004, 0.00158207, 0.00154756, 0.00168787, 0.00176523,
               0.00198432, 0.00196122, 0.00202797]
    lstm_mse = [0.005726, 0.00809018, 0.00813904, 0.00718486, 0.00721951, 0.006537, 0.0061543, 0.00495881, 0.00492331,
                0.00465541, 0.00459913, 0.00611492]
    cnn_mse = [0.00185766, 0.00189354, 0.002149, 0.00236542, 0.00287093, 0.00300828, 0.00306829, 0.00311816, 0.00291451,
               0.00286384, 0.00334394, 0.004005]
    arima_mse = [0.0008744091258934194, 0.0008900153641430354, 0.0014245834815417354, 0.0021564412077785377,
                 0.002431295652316265, 0.003106784888922365, 0.003115869369322841, 0.0034955404039697198,
                 0.003067653329765412, 0.0038130204998127015, 0.003601289603180532, 0.0039183037858420405]



    # Oslo temperature
    """
    rnn_mse = [0.00292803, 0.00321233, 0.00325175, 0.00338528, 0.00339375, 0.00343696, 0.00338748, 0.00337818, 0.00333371, 0.00327662, 0.00337425, 0.00349219]
    lstm_mse = [0.0035632, 0.00436782, 0.00465195, 0.00480971, 0.00484582, 0.00469057, 0.00454697, 0.00436002,
                0.00430212, 0.00438615, 0.0046761, 0.00511629]
    cnn_mse = [0.00411009, 0.00412288, 0.00445392, 0.00440684, 0.00440694, 0.00442767, 0.00385172, 0.00388208,
               0.00378085, 0.00380034, 0.00386425, 0.00410725]
    arima_mse = [0.0027742791567949444, 0.003026922984758624, 0.003061867407057845, 0.0031879510825535374,
                 0.0031966817397663214, 0.003200164528171193, 0.003193787090664327, 0.003185740026879537,
                 0.0031785926262548185, 0.0032060380785219823, 0.0032500623985566427, 0.0033366141639839305]
    """
    print('mean rnn mse', np.mean(rnn_mse))
    print('mean lstm mse', np.mean(lstm_mse))
    print('mean cnn mse', np.mean(cnn_mse))
    print('mean arima mse', np.mean(arima_mse))

    t = np.linspace(1, len(rnn_mse), len(rnn_mse))
    plt.figure()
    plt.plot(t, rnn_mse, label='RNN')
    plt.plot(t, lstm_mse, label='LSTM')
    plt.plot(t, cnn_mse, label='CNN')
    plt.plot(t, arima_mse, label='SARIMA')

    plt.title('MSE for sliding window prediction')
    plt.xlabel('Forecast horizon (months)')
    plt.ylabel('Mean MSE at given forecast horizon')
    plt.legend()
    plt.show()


def plot_dropout_rate():
    rnn_coverage_00 = [0.9301075268817204, 0.9032258064516129, 0.9086021505376344, 0.9032258064516129, 0.9032258064516129, 0.9032258064516129, 0.9032258064516129, 0.9086021505376344, 0.9086021505376344, 0.9139784946236559, 0.9086021505376344, 0.8924731182795699]
    rnn_coverage_01 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.956989247311828, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.9623655913978495]
    rnn_coverage_02 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.9516129032258065, 0.956989247311828]
    rnn_coverage_03 = [0.9623655913978495, 0.956989247311828, 0.9516129032258065, 0.9516129032258065, 0.956989247311828, 0.956989247311828, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.9516129032258065, 0.9623655913978495]
    rnn_coverage_04 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.956989247311828]
    rnn_coverage_05 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.956989247311828, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.9516129032258065, 0.9623655913978495]
    rnn_coverage_06 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.956989247311828, 0.9516129032258065, 0.956989247311828]
    rnn_coverage_07 = [0.9623655913978495, 0.956989247311828, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.956989247311828, 0.946236559139785, 0.946236559139785, 0.9516129032258065, 0.9516129032258065, 0.9516129032258065, 0.9623655913978495]
    print('Mean coverage at rate 0.0', np.mean(rnn_coverage_00))
    print('Mean coverage at rate 0.1', np.mean(rnn_coverage_01))
    print('Mean coverage at rate 0.2', np.mean(rnn_coverage_02))
    print('Mean coverage at rate 0.3', np.mean(rnn_coverage_03))
    print('Mean coverage at rate 0.4', np.mean(rnn_coverage_04))
    print('Mean coverage at rate 0.5', np.mean(rnn_coverage_05))
    print('Mean coverage at rate 0.6', np.mean(rnn_coverage_06))
    print('Mean coverage at rate 0.7', np.mean(rnn_coverage_07))


if __name__ == '__main__':
    plot_coverage()
    plot_width()
    plot_mse()
    plot_dropout_rate()
